// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/28/2020 22:48:24"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          BranchControl
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module BranchControl_vlg_vec_tst();
// constants                                           
// general purpose registers
reg BC;
reg JB;
reg N;
reg PL;
reg Z;
// wires                                               
wire [1:0] K;

// assign statements (if any)                          
BranchControl i1 (
// port map - connection between master ports and signals/registers   
	.BC(BC),
	.JB(JB),
	.K(K),
	.N(N),
	.PL(PL),
	.Z(Z)
);
initial 
begin 
#3200000 $finish;
end 

// PL
always
begin
	PL = 1'b0;
	PL = #1600000 1'b1;
	#1600000;
end 

// JB
always
begin
	JB = 1'b0;
	JB = #800000 1'b1;
	#800000;
end 

// BC
always
begin
	BC = 1'b0;
	BC = #400000 1'b1;
	#400000;
end 

// Z
always
begin
	Z = 1'b0;
	Z = #200000 1'b1;
	#200000;
end 

// N
always
begin
	N = 1'b0;
	N = #100000 1'b1;
	#100000;
end 
endmodule

