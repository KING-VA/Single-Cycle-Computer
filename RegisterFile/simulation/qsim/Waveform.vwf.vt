// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/25/2020 15:37:12"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          RegisterFile
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module RegisterFile_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [2:0] Aaddr;
reg [2:0] Baddr;
reg Clock;
reg [2:0] Daddr;
reg [7:0] Ddata;
reg ResetN;
reg Write;
// wires                                               
wire [7:0] Adata;
wire [7:0] Bdata;

// assign statements (if any)                          
RegisterFile i1 (
// port map - connection between master ports and signals/registers   
	.Aaddr(Aaddr),
	.Adata(Adata),
	.Baddr(Baddr),
	.Bdata(Bdata),
	.Clock(Clock),
	.Daddr(Daddr),
	.Ddata(Ddata),
	.ResetN(ResetN),
	.Write(Write)
);
initial 
begin 
#500000 $finish;
end 

// Write
initial
begin
	Write = 1'b1;
end 

// ResetN
initial
begin
	ResetN = 1'b1;
end 

// Clock
always
begin
	Clock = 1'b0;
	Clock = #50000 1'b1;
	#50000;
end 
// Aaddr[ 2 ]
initial
begin
	Aaddr[2] = 1'b0;
	Aaddr[2] = #400000 1'b1;
end 
// Aaddr[ 1 ]
initial
begin
	Aaddr[1] = 1'b0;
	Aaddr[1] = #200000 1'b1;
	Aaddr[1] = #200000 1'b0;
end 
// Aaddr[ 0 ]
initial
begin
	repeat(2)
	begin
		Aaddr[0] = 1'b0;
		Aaddr[0] = #100000 1'b1;
		# 100000;
	end
	Aaddr[0] = 1'b0;
end 
// Baddr[ 2 ]
initial
begin
	Baddr[2] = 1'b0;
	Baddr[2] = #400000 1'b1;
end 
// Baddr[ 1 ]
initial
begin
	Baddr[1] = 1'b0;
	Baddr[1] = #200000 1'b1;
	Baddr[1] = #200000 1'b0;
end 
// Baddr[ 0 ]
initial
begin
	repeat(2)
	begin
		Baddr[0] = 1'b0;
		Baddr[0] = #100000 1'b1;
		# 100000;
	end
	Baddr[0] = 1'b0;
end 
// Daddr[ 2 ]
initial
begin
	Daddr[2] = 1'b0;
end 
// Daddr[ 1 ]
initial
begin
	Daddr[1] = 1'b1;
end 
// Daddr[ 0 ]
initial
begin
	Daddr[0] = 1'b1;
end 
// Ddata[ 7 ]
initial
begin
	Ddata[7] = 1'b1;
end 
// Ddata[ 6 ]
initial
begin
	Ddata[6] = 1'b1;
end 
// Ddata[ 5 ]
initial
begin
	Ddata[5] = 1'b1;
end 
// Ddata[ 4 ]
initial
begin
	Ddata[4] = 1'b1;
end 
// Ddata[ 3 ]
initial
begin
	Ddata[3] = 1'b1;
end 
// Ddata[ 2 ]
initial
begin
	Ddata[2] = 1'b1;
end 
// Ddata[ 1 ]
initial
begin
	Ddata[1] = 1'b1;
end 
// Ddata[ 0 ]
initial
begin
	Ddata[0] = 1'b1;
end 
endmodule

