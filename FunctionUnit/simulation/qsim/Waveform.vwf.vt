// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/17/2020 18:03:01"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          FunctionUnit
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module FunctionUnit_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] A;
reg [7:0] B;
reg [3:0] FS;
// wires                                               
wire C;
wire [7:0] F;
wire N;
wire V;
wire Z;

// assign statements (if any)                          
FunctionUnit i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.C(C),
	.F(F),
	.FS(FS),
	.N(N),
	.V(V),
	.Z(Z)
);
initial 
begin 
#1600000 $finish;
end 
// A[ 7 ]
initial
begin
	A[7] = 1'b1;
end 
// A[ 6 ]
initial
begin
	A[6] = 1'b1;
end 
// A[ 5 ]
initial
begin
	A[5] = 1'b1;
end 
// A[ 4 ]
initial
begin
	A[4] = 1'b1;
end 
// A[ 3 ]
initial
begin
	A[3] = 1'b0;
end 
// A[ 2 ]
initial
begin
	A[2] = 1'b0;
end 
// A[ 1 ]
initial
begin
	A[1] = 1'b0;
end 
// A[ 0 ]
initial
begin
	A[0] = 1'b0;
end 
// B[ 7 ]
initial
begin
	B[7] = 1'b0;
end 
// B[ 6 ]
initial
begin
	B[6] = 1'b0;
end 
// B[ 5 ]
initial
begin
	B[5] = 1'b0;
end 
// B[ 4 ]
initial
begin
	B[4] = 1'b0;
end 
// B[ 3 ]
initial
begin
	B[3] = 1'b1;
end 
// B[ 2 ]
initial
begin
	B[2] = 1'b1;
end 
// B[ 1 ]
initial
begin
	B[1] = 1'b1;
end 
// B[ 0 ]
initial
begin
	B[0] = 1'b1;
end 
// FS[ 3 ]
always
begin
	FS[3] = 1'b0;
	FS[3] = #800000 1'b1;
	#800000;
end 
// FS[ 2 ]
always
begin
	FS[2] = 1'b0;
	FS[2] = #400000 1'b1;
	#400000;
end 
// FS[ 1 ]
always
begin
	FS[1] = 1'b0;
	FS[1] = #200000 1'b1;
	#200000;
end 
// FS[ 0 ]
always
begin
	FS[0] = 1'b0;
	FS[0] = #100000 1'b1;
	#100000;
end 
endmodule

