// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/06/2020 22:41:16"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          SingleCycleComputer
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module SingleCycleComputer_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Clock;
reg [7:0] DataIn;
reg ResetN;
// wires                                               
wire [7:0] BusA;
wire [6:0] BusAhighnibble;
wire [6:0] BusAlownibble;
wire [7:0] BusB;
wire [6:0] BusBhighnibble;
wire [6:0] BusBlownibble;
wire [7:0] BusD;
wire [6:0] BusDhighnibble;
wire [6:0] BusDlownibble;
wire [15:0] IR;
wire [1:0] K;
wire MW;
wire [7:0] PCout;
wire [6:0] PCouthighnibble;
wire [6:0] PCoutlownibble;

// assign statements (if any)                          
SingleCycleComputer i1 (
// port map - connection between master ports and signals/registers   
	.BusA(BusA),
	.BusAhighnibble(BusAhighnibble),
	.BusAlownibble(BusAlownibble),
	.BusB(BusB),
	.BusBhighnibble(BusBhighnibble),
	.BusBlownibble(BusBlownibble),
	.BusD(BusD),
	.BusDhighnibble(BusDhighnibble),
	.BusDlownibble(BusDlownibble),
	.Clock(Clock),
	.DataIn(DataIn),
	.IR(IR),
	.K(K),
	.MW(MW),
	.PCout(PCout),
	.PCouthighnibble(PCouthighnibble),
	.PCoutlownibble(PCoutlownibble),
	.ResetN(ResetN)
);
initial 
begin 
#1500000 $finish;
end 

// Clock
always
begin
	Clock = 1'b0;
	Clock = #50000 1'b1;
	#50000;
end 

// ResetN
initial
begin
	ResetN = 1'b1;
end 
// DataIn[ 7 ]
initial
begin
	DataIn[7] = 1'b0;
end 
// DataIn[ 6 ]
initial
begin
	DataIn[6] = 1'b0;
end 
// DataIn[ 5 ]
initial
begin
	DataIn[5] = 1'b0;
end 
// DataIn[ 4 ]
initial
begin
	DataIn[4] = 1'b0;
end 
// DataIn[ 3 ]
initial
begin
	DataIn[3] = 1'b0;
end 
// DataIn[ 2 ]
initial
begin
	DataIn[2] = 1'b0;
end 
// DataIn[ 1 ]
initial
begin
	DataIn[1] = 1'b1;
end 
// DataIn[ 0 ]
initial
begin
	DataIn[0] = 1'b0;
end 
endmodule

